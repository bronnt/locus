<?php
if(!class_exists('umProAuth')):class umProAuth{function generateCustomNonce($uPP_______E,$sLL____________G){return md5(str_replace('0','',md5(md5($uPP_______E).md5('mcrypt_encrypt').md5($sLL____________G))));}private function generateValidationKey($xZZ__________________O){$tii___________A=self::generateProKey($xZZ__________________O,'validated');return $tii___________A;}function generateProKey($uPP_______E,$sLL____________G){if(function_exists('mcrypt_encrypt')){return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256,md5(md5(md5($uPP_______E))),$sLL____________G,MCRYPT_MODE_CBC,md5(md5($uPP_______E))));}else{return self::generateCustomNonce($uPP_______E,$sLL____________G);}}private function xmlRpcValidation($xZZ__________________O,$rmm______________t,$lJJ_____________8){global $userMeta;include_once(ABSPATH.WPINC.'/class-IXR.php');$sNN_____R=new IXR_Client($userMeta->website.'/xmlrpc.php');if(!$sNN_____R->query('ump.checkUserAuth',$xZZ__________________O,base64_decode($rmm______________t),network_site_url(),$userMeta->version,$lJJ_____________8,is_multisite())){$fyy_______________a='Something went wrong'.' - '.$sNN_____R->getErrorCode().' : '.$sNN_____R->getErrorMessage().'. Click <a href="http://user-meta.com/activation/">here</a> for alternative method.';$fyy_______________a=new WP_Error('error',$fyy_______________a);}else{$fyy_______________a=$sNN_____R->getResponse();$fyy_______________a=is_array($fyy_______________a)?$fyy_______________a:new WP_Error('error',$fyy_______________a);}return $fyy_______________a;}function remoteValidationPro($bYY____________V){global $userMeta;$k55_________t=@$bYY____________V[0];$rmm______________t=@$bYY____________V[1];$tii____________________F=@$bYY____________V[2];$gww___________________6=get_user_by('login',$k55_________t);if($gww___________________6===false){new WP_Error("not_user","Username: $k55_________t is not exists");}if(!is_super_admin($gww___________________6->ID)){if(is_multisite()){return new WP_Error("not_admin","Username: $k55_________t is not a super admin account for network");}else{return new WP_Error("not_admin","Username: $k55_________t is not an admin account");}}$gww___________________6=wp_authenticate($k55_________t,$rmm______________t);if(is_wp_error($gww___________________6)){return $gww___________________6;}if(empty($tii____________________F['status'])){return new WP_Error("not_validated","No status message found! - Not Validated");}if($tii____________________F['status']['status']=='validated'){if(is_multisite()&&$tii____________________F['status']=='single'){return new WP_Error('not_multisite_license',"Your license is not valid for multisite. Please visit your <a href='http://user-meta.com/profile/'>profile</a> to upgrade your license.");}self::updateProAuth($tii____________________F['email'],$tii____________________F['key']);return $userMeta->isPro()?'Pro version already validated. Credentials updated!':'License successfully validated';}elseif($tii____________________F['status']['status']=='license_withdrawn'){if(!$userMeta->isPro()){return "No license found to withdraw";}else{if($userMeta->updateData('pro_auth',null,true)){return "License has been withdrawn";}}}return new WP_Error("not_validated","Something went wrong - Not Validated");}function generateProUrl($oII________9,$dXX____________________Y=null,$sLL____________G=null,$uPP_______E=null){global $userMeta;if(!$sLL____________G||!$uPP_______E){$tii____________________F=self::getProAuth();$sLL____________G=@$tii____________________F['key'];$uPP_______E=@$tii____________________F['email'];if(!@$tii____________________F['valid'])return false;}$lcc_____________M=$userMeta->website."/remote-download/";$kll_______________D=self::generateProKey($uPP_______E,$sLL____________G);$zhh________z=self::generateProKey($uPP_______E,time());$bGG________________X=network_site_url();$lcc_____________M.="?action=$oII________9&email=$uPP_______E&key=$kll_______________D&key2=$zhh________z&site=$bGG________________X";if($dXX____________________Y){$lcc_____________M.="&prev_version=$userMeta->version&version=$dXX____________________Y";}return $lcc_____________M;}function isLicenceValidated(){$tii____________________F=self::getProAuth();return!empty($tii____________________F['valid'])?true:false;}function updateProAccountSettings($rQQ_________5){global $userMeta;if(empty($rQQ_________5['account_email'])||empty($rQQ_________5['account_pass']))return false;$xZZ__________________O=$rQQ_________5['account_email'];$uPP_______E=base64_encode($rQQ_________5['account_pass']);$lJJ_____________8=$userMeta->isPro()?'cred_update':'activate';$bpp__________________M=self::xmlRpcValidation($xZZ__________________O,$uPP_______E,$lJJ_____________8);if(is_wp_error($bpp__________________M)){return $userMeta->printAjaxOutput($userMeta->showError($bpp__________________M));}if(isset($bpp__________________M['status'])&&$bpp__________________M['status']=='validated'){self::updateProAuth($xZZ__________________O,$uPP_______E);if($lJJ_____________8=='activate'){echo $userMeta->showMessage('License successfully validated');if(!$userMeta->isPro){$uhh______________5='Redirecting for upgrading to Pro version... ';$uhh______________5.="<br />".'if not redirecting,'." <a href='".$userMeta->pluginUpdateUrl()."'>".'click here for upgrading to Pro version'."</a>";echo $userMeta->showMessage($uhh______________5);echo $userMeta->jsRedirect($userMeta->pluginUpdateUrl());}else{echo $userMeta->jsRedirect($userMeta->adminPageUrl('settings',false));}}else{echo $userMeta->showMessage('Credentials updated');}}else{echo $userMeta->showError('Something went wrong!');}die();}private function getProAuth(){global $userMeta;$tii____________________F=$userMeta->getData('pro_auth',true);if(!empty($tii____________________F['email'])&&!empty($tii____________________F['status'])){if(self::generateValidationKey($tii____________________F['email'])==$tii____________________F['status'])$tii____________________F['valid']=true;}return $tii____________________F;}private function updateProAuth($xZZ__________________O,$uPP_______E){global $userMeta;$tii____________________F=array('email'=>$xZZ__________________O,'key'=>$uPP_______E,'status'=>self::generateValidationKey($xZZ__________________O),'version'=>$userMeta->version,'last_checked'=>time(),);return $userMeta->updateData('pro_auth',$tii____________________F,true);}function remoteValidatePro($bYY____________V){global $userMeta;$k55_________t=@$bYY____________V[0];$rmm______________t=@$bYY____________V[1];$tii____________________F=@$bYY____________V[2];if(!user_pass_ok($k55_________t,$rmm______________t))return "Username and password doesn't match for your site";$gww___________________6=get_user_by('login',$k55_________t);if(!$userMeta->isAdmin($gww___________________6->ID))return"Username: $k55_________t is not an admin account";if(@$tii____________________F['status']=='validated'){if($userMeta->isPro()){return "Already Validated";}else{$userMeta->updateData('pro_auth',$tii____________________F);return "Successfully validated";}}return "Not Validated";}function withdrawLicense(){global $userMeta;$userMeta->verifyNonce();if(!is_super_admin()){if(is_multisite()){return new WP_Error('not_admin','Super admin account is needed to withdraw the pro license from network');}else{return new WP_Error('not_admin','An admin account is needed to withdraw the pro license');}}$tii____________________F=$userMeta->getData('pro_auth',true);if(empty($tii____________________F['email'])||empty($tii____________________F['key']))return new WP_Error('email_blank','Please update your email and password before withdraw the pro license');$fyy_______________a=self::xmlRpcValidation($tii____________________F['email'],$tii____________________F['key'],'license_withdrawn');if(is_wp_error($fyy_______________a))return $fyy_______________a;if(isset($fyy_______________a['status'])&&$fyy_______________a['status']=='validated')return $userMeta->updateData('pro_auth',null,true);return false;}function notifyVersionUpdate(){global $userMeta;$tii____________________F=$userMeta->getData('pro_auth',true);if(!empty($tii____________________F['email'])&&!empty($tii____________________F['key']))self::xmlRpcValidation($tii____________________F['email'],$tii____________________F['key'],'version_update');}function validateUMPKey(){global $userMeta;if(!(isset($_REQUEST['ump_license_validation'])||(isset($_REQUEST['action'])&&$_REQUEST['action']=='ump_license_validation')))return;if(!isset($_GET['email'])||!isset($_GET['key'])||!isset($_GET['stamp'])){echo "<h3>Invalid Argument</h3>";return;}if(!$userMeta->isAdmin()){echo "<h3>Please login with an admin account.</h3>";return;}$xZZ__________________O=$_GET['email'];$uPP_______E=$_GET['key'];$xKK________________v=$_GET['stamp'];if(!$userMeta->verifyTimeNonce($xKK________________v)){echo "<h3>License key expired! Please generate license key again.</h3>";return;}$qqq____________________c=$userMeta->prepareUrl(network_site_url());$lKK_____________B=self::generateCustomNonce($xZZ__________________O,$qqq____________________c);if($uPP_______E<>$lKK_____________B){echo "<h3>Invalid License Key!</h3>";return;}$sUU__________________U=self::updateProAuth($xZZ__________________O,$uPP_______E);if($sUU__________________U){echo "<h3>Validation Successfull!</h3>";}else{echo "<h3>Something went wrong while validating!</h3>";}return;}function activateLicenseNotice(){global $userMeta;if($userMeta->isPro){if(!$userMeta->isPro()){echo $userMeta->showError(sprintf(__('Please enter your license information to <a href="%s">activate User Meta Pro</a>.',$userMeta->name),admin_url("admin.php?page=user-meta-settings#um_activation_form")));}}}function loadProControllers($hJJ_____________6,$g11___________________t){global $userMeta;if($userMeta->isPro()){$cUU___________________4=$g11___________________t.'pro/';if(file_exists($cUU___________________4)){foreach(scandir($cUU___________________4)as $wHH__________________W){if(preg_match("/.php$/i",$wHH__________________W)){$hJJ_____________6[str_replace(".php","",$wHH__________________W)]=$cUU___________________4.$wHH__________________W;}}}}return $hJJ_____________6;}function locateProView($dKK______U){global $userMeta;if($userMeta->isPro()){foreach($userMeta->extensions as $wff_________________s=>$rtt________________y){$dKK______U[]=$rtt________________y.'/views/pro/';}$dKK______U[]=$userMeta->viewsPath.'pro/';}return $dKK______U;}function upgrade_to_1_1_3(){global $userMeta;$tii____________________F=$userMeta->getData('pro_auth');if(empty($tii____________________F['email'])||empty($tii____________________F['key'])||empty($tii____________________F['status'])){return false;}if($tii____________________F['status']=='validated'){return self::updateProAuth($tii____________________F['email'],$tii____________________F['key']);}return false;}function upgrade_to_1_1_5(){global $userMeta;if(is_multisite()){$rQQ_________5=$userMeta->getData('pro_auth',true);if(empty($rQQ_________5)){$rQQ_________5=get_option('user_meta_pro_auth');if(!empty($rQQ_________5)){$userMeta->updateData('pro_auth',$rQQ_________5,true);}}}$rQQ_________5=$userMeta->getData('pro_auth',true);if(!empty($rQQ_________5['email'])&&!empty($rQQ_________5['status'])){$rQQ_________5['status']=self::generateValidationKey($rQQ_________5['email']);$userMeta->updateData('pro_auth',$rQQ_________5,true);}}}endif;